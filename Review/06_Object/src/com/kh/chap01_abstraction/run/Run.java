package com.kh.chap01_abstraction.run;


import com.kh.chap01_abstraction.model.vo.Student;

public class Run {
	
	/*
	 * 1. 객체 지향 언어 : "객체"를 "지향"하는 언어로 "객체 중심"으로 돌아간다고 생각
	 * 
	 * 2. 객체란 : 사전적 의미로 현실세계에 독립적으로 존재(목적이 있고 존재가치가 있고 의미가 있는)하는 모든것들
	 * 
	 * 3. 객체지향 프로그래밍 : 현실세계에서 독립적인 존재(객체)간의 상호작용 => 가상세계(코드)로 구현하는 과정
	 * 
	 * 4. 구현하고자하는 프로그램 상의 필요한 객체를 만들기 위해서 (즉, 생성하기 위해서) : 클래스라는 틀을 먼저 만들어야됨!! 
	 * 															  (각 객체들의 속성(정보)들을 담아낼 그릇과도 같음)
	 * 															     어떻게? : 추상화 + 캡슐화 접목해서
	 * 
	 * 5. 추상화 과정
	 *    1) 내가 구현하고자 하는 프로그램에서 필요한 객체들을 생각해보기
	 *    2) 그 객체들이 가지고 있는 공통적인 속성, 기능들을 모두 추출 (100개가 됐든 200개가 됐든)
	 *    3) 그렇게 추출된것들을 가지고 내가 구현하고자 하는 프로그램 "실질적인 목적"에 맞춰 불필요한것들 제거 (필요한것들만 추리기)
	 *    4) 그렇게 최종적으로 선정된 속성들을 가지고 어떤자료형, 어떤변수명으로 사용할건지 생각
	 *    
	 *    ex) 학생관련 프로그램
	 *    	  1) 학생관련객체 (홍길동 학생, 김영희 학생, 홍길녀 학생, .... )
	 *    
	 *    	  2) 공통적인 속성 및 기능(이름, 나이, 주소, 전화번호, 키, 달리기속도, 학년, 반, 국어점수, 수학점수, 영어점수, 
	 *    						몸무게, 머리색깔, 발사이즈, 먹는다, 잔다, 응가한다, ...)
	 *    
	 *    	  3) 학생 "인적사항"을 관리하는 프로그램 : 이름, 나이, 주소, 전화번호, 학년, 반
	 *           학생 "성적"을 관리하는 프로그램 : 이름, 학년, 반, 국어점수, 수학점수, 영어점수
	 *           학생 "건강"을 관리하는 프로그램 : 이름, 키, 달리기속도, 학년, 반, 몸무게, 먹는다, 응가한다
	 *           
	 *           최종적으로 추려진 걸 : 이름, 나이, 키  라는 가정하에 
	 *        
	 *        4) 이름 --> String name;
	 *           나이 --> int age;
	 *           키    --> double height;
	 *  
	 *  
	 * 6. 위에서 선정된 것들을 가지고 본격적으로 프로그래밍 진행.. 
	 * 
	 *    1) "변수"만을 가지고 프로그램을 구현하게 된다면?
	 *    
	 *    	 * 변수 - 하나의 자료형의 하나의 값만을 보관할 수 있음
	 *    
	 *       홍길동 객체 찍어내기 --> String name1 = "홍길동"; int age1 = 20; double height1 = 162.3;
	 *       김말똥 객체 찍어내기 --> String name2 = "김말똥"; int age2 = 21; double height2 = 173.4;
	 *       김영희 객체 찍어내기 --> String name3 = "김영희"; int age3 = 22; double height3 = 182.7;
	 *       
	 *       .... 수십개, 수백개의 객체가 더필요.. => 수천개의 변수..  
	 *       
	 *    2) "배열"을 가지고 프로그램을 구현하게 된다면?
	 *    
	 *    	 * 배열 - 하나의 자료형의 여러개의 값들을 보관할 수 있음
	 *    
	 *       학생들의 이름들을 보관하는    String[] name = {"홍길동", "김말똥", "김영희", .....};
	 *       학생들의 나이를 보관하는               int[] age = {  20  ,   21  ,   22  , .....};
	 *       학생들의 키를 보관하는      double[] height = { 162.3,  173.4,  182.7 , ....};
	 *   
	 *   	  변수보다는 낫지만 어떤가 문제 발생?
	 *   	  추가적인 데이터를 넣을 때 크기 문제발생, 혹시라도 삭제할 때 실수로 하나라도 값을 제대로 못지우면 데이터 불일치 발생할 수 있다!
	 * 
	 * 	  3) 그래서 나온 개념이 구조체의 개념!
	 * 		
	 * 		 * 구조체 - 여러개의 자료형의 여러개의 값을 담을 수 있는 배열같은 형태
	 * 
	 * 		 그러면 String값도 보관하고, int값도 보관하고, double값도 같이 보관할 수 있는 나만의 배열같은 자료형을 만들자!
	 *       => 그게 바로 클래스!!
	 *          Student 클래스를 만들어서 그 안에 필드라는 걸로 String name, int age, double height 정의 해놓기!!
	 * 
	 * 
	 * 
	 */
	
	public static void main(String[] args) {
		
		int[] arr = new int[5];
		arr[0] = 1;
		
		// 홍길동 객체를 찍기 위해서
		// new라는 연산자를 통해 Heap영역에 공간을 할당받아야됨(공간확보)
		Student hong = new Student(); // 생성
		hong.name = "홍길동";
		hong.age = 20;
		hong.height = 162.3;
		// 직접 접근을 통해 값 초기화
		
		
		System.out.println(hong.name + "님의 나이는 " + hong.age + "살이고, 키는 " + hong.height + "cm입니다.");
		
		// 김말똥 학생 객체
		Student ddong = new Student();
		ddong.name = "김말똥";
		ddong.age = 21;
		ddong.height = 173.4;
		
		System.out.println(ddong.name + "님의 나이는 " + ddong.age + "살이고, 키는 " + ddong.height + "cm입니다.");
		
		// 직접 접근을 하게되면 --> 외부에서 값을 마음대로 변경해버릴 수 있음 
		// --> 객체지향 설계원칙 중에 정보은닉 기술중에 일부분이 "캡슐화"
		
	}

}






